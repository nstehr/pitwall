// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: vm.proto

package vm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VMServiceClient is the client API for VMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMServiceClient interface {
	CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (VMService_CreateVMClient, error)
}

type vMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVMServiceClient(cc grpc.ClientConnInterface) VMServiceClient {
	return &vMServiceClient{cc}
}

func (c *vMServiceClient) CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (VMService_CreateVMClient, error) {
	stream, err := c.cc.NewStream(ctx, &VMService_ServiceDesc.Streams[0], "/vm.VMService/CreateVM", opts...)
	if err != nil {
		return nil, err
	}
	x := &vMServiceCreateVMClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VMService_CreateVMClient interface {
	Recv() (*VM, error)
	grpc.ClientStream
}

type vMServiceCreateVMClient struct {
	grpc.ClientStream
}

func (x *vMServiceCreateVMClient) Recv() (*VM, error) {
	m := new(VM)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VMServiceServer is the server API for VMService service.
// All implementations must embed UnimplementedVMServiceServer
// for forward compatibility
type VMServiceServer interface {
	CreateVM(*CreateVMRequest, VMService_CreateVMServer) error
	mustEmbedUnimplementedVMServiceServer()
}

// UnimplementedVMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVMServiceServer struct {
}

func (UnimplementedVMServiceServer) CreateVM(*CreateVMRequest, VMService_CreateVMServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateVM not implemented")
}
func (UnimplementedVMServiceServer) mustEmbedUnimplementedVMServiceServer() {}

// UnsafeVMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMServiceServer will
// result in compilation errors.
type UnsafeVMServiceServer interface {
	mustEmbedUnimplementedVMServiceServer()
}

func RegisterVMServiceServer(s grpc.ServiceRegistrar, srv VMServiceServer) {
	s.RegisterService(&VMService_ServiceDesc, srv)
}

func _VMService_CreateVM_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateVMRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VMServiceServer).CreateVM(m, &vMServiceCreateVMServer{stream})
}

type VMService_CreateVMServer interface {
	Send(*VM) error
	grpc.ServerStream
}

type vMServiceCreateVMServer struct {
	grpc.ServerStream
}

func (x *vMServiceCreateVMServer) Send(m *VM) error {
	return x.ServerStream.SendMsg(m)
}

// VMService_ServiceDesc is the grpc.ServiceDesc for VMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vm.VMService",
	HandlerType: (*VMServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateVM",
			Handler:       _VMService_CreateVM_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vm.proto",
}
