# Should I just inherit from the web container?  
# Probably as there isn't enough changes to warrant the 
# mostly duplications...
FROM ruby:3.1.0-alpine AS base

# Install system dependencies required both at runtime and build time
# The image uses Postgres but you can swap it with mariadb-dev (for MySQL) or sqlite-dev
RUN apk add --update \
  postgresql-dev \
  tzdata \
  gcompat \
  nodejs

# This stage will be responsible for installing gems and npm packages
FROM base AS dependencies

# Install system dependencies required to build some Ruby gems (pg)
RUN apk add --update build-base

COPY Gemfile Gemfile.lock ./

# an alternative to this approach is to do BUNDLE_FORCE_RUBY_PLATFORM=1
# from: https://docs.anycable.io/troubleshooting?id=problems-with-docker-alpine-images
RUN gem install --platform ruby google-protobuf -v '3.21.9' -N
# Install gems (excluding development/test dependencies)
RUN bundle config set without "development test" && \
  bundle install --jobs=5 --retry=3

# We're back at the base stage
FROM base

# Create a non-root user to run the app and own app-specific files
RUN adduser -D app

# # Switch to this user
USER app

# We'll install the app in this directory
WORKDIR /home/app

# Copy over gems from the dependencies stage
COPY --from=dependencies /usr/local/bundle/ /usr/local/bundle/


# Finally, copy over the code
# This is where the .dockerignore file comes into play
# Note that we have to use `--chown` here
COPY --chown=app . ./

ENV RAILS_LOG_TO_STDOUT=true
# Launch the listener
# WORKERS=OrchestratorVmStatusWorker,OrchestratorHealthWorker bundle exec rake sneakers:run
ENV WORKERS=OrchestratorVmStatusWorker,OrchestratorHealthWorker
ENV RAILS_ENV=production
CMD ["bundle", "exec", "rake", "sneakers:run"]